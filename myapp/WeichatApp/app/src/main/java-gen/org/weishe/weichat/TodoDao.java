package org.weishe.weichat;

import org.weishe.weichat.bean.Todo;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TODO.
*/
public class TodoDao extends AbstractDao<Todo, Long> {

    public static final String TABLENAME = "TODO";

    /**
     * Properties of entity Todo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TodoId = new Property(1, Integer.class, "todoId", false, "TODO_ID");
        public final static Property WhoId = new Property(2, Integer.class, "whoId", false, "WHO_ID");
        public final static Property Checked = new Property(3, Boolean.class, "checked", false, "CHECKED");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property FromId = new Property(5, Integer.class, "fromId", false, "FROM_ID");
        public final static Property GroupId = new Property(6, Integer.class, "groupId", false, "GROUP_ID");
        public final static Property CreateDate = new Property(7, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Complete = new Property(8, Boolean.class, "complete", false, "COMPLETE");
        public final static Property Agree = new Property(9, Boolean.class, "agree", false, "AGREE");
        public final static Property RequestMsg = new Property(10, String.class, "requestMsg", false, "REQUEST_MSG");
        public final static Property HandleMsg = new Property(11, String.class, "handleMsg", false, "HANDLE_MSG");
        public final static Property HandleDate = new Property(12, String.class, "handleDate", false, "HANDLE_DATE");
        public final static Property TodoSubject = new Property(13, String.class, "todoSubject", false, "TODO_SUBJECT");
    };


    public TodoDao(DaoConfig config) {
        super(config);
    }
    
    public TodoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TODO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TODO_ID' INTEGER," + // 1: todoId
                "'WHO_ID' INTEGER," + // 2: whoId
                "'CHECKED' INTEGER," + // 3: checked
                "'TYPE' INTEGER," + // 4: type
                "'FROM_ID' INTEGER," + // 5: fromId
                "'GROUP_ID' INTEGER," + // 6: groupId
                "'CREATE_DATE' INTEGER," + // 7: createDate
                "'COMPLETE' INTEGER," + // 8: complete
                "'AGREE' INTEGER," + // 9: agree
                "'REQUEST_MSG' TEXT," + // 10: requestMsg
                "'HANDLE_MSG' TEXT," + // 11: handleMsg
                "'HANDLE_DATE' TEXT," + // 12: handleDate
                "'TODO_SUBJECT' TEXT);"); // 13: todoSubject
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TODO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Todo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer todoId = entity.getTodoId();
        if (todoId != null) {
            stmt.bindLong(2, todoId);
        }
 
        Integer whoId = entity.getWhoId();
        if (whoId != null) {
            stmt.bindLong(3, whoId);
        }
 
        Boolean checked = entity.getChecked();
        if (checked != null) {
            stmt.bindLong(4, checked ? 1l: 0l);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        Integer fromId = entity.getFromId();
        if (fromId != null) {
            stmt.bindLong(6, fromId);
        }
 
        Integer groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(7, groupId);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(8, createDate.getTime());
        }
 
        Boolean complete = entity.getComplete();
        if (complete != null) {
            stmt.bindLong(9, complete ? 1l: 0l);
        }
 
        Boolean agree = entity.getAgree();
        if (agree != null) {
            stmt.bindLong(10, agree ? 1l: 0l);
        }
 
        String requestMsg = entity.getRequestMsg();
        if (requestMsg != null) {
            stmt.bindString(11, requestMsg);
        }
 
        String handleMsg = entity.getHandleMsg();
        if (handleMsg != null) {
            stmt.bindString(12, handleMsg);
        }
 
        String handleDate = entity.getHandleDate();
        if (handleDate != null) {
            stmt.bindString(13, handleDate);
        }
 
        String todoSubject = entity.getTodoSubject();
        if (todoSubject != null) {
            stmt.bindString(14, todoSubject);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Todo readEntity(Cursor cursor, int offset) {
        Todo entity = new Todo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // todoId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // whoId
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // checked
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // fromId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // groupId
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // createDate
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // complete
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // agree
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // requestMsg
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // handleMsg
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // handleDate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // todoSubject
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Todo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTodoId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setWhoId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setChecked(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFromId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setGroupId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCreateDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setComplete(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setAgree(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setRequestMsg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHandleMsg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setHandleDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTodoSubject(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Todo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Todo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
